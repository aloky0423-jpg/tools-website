<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>PDF Lock/Unlock Tool</title>

  <style>
    :root {
      --primary: #007bff;
      --light: #f8f9fa;
      --text: #222;
      --radius: 12px;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background-color: var(--light);
      color: var(--text);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      padding: 20px;
    }

    .container {
      background: #fff;
      border-radius: var(--radius);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      max-width: 600px;
      width: 100%;
      text-align: center;
      padding: 25px;
    }

    h2 {
      color: var(--primary);
      margin-bottom: 15px;
    }

    .upload-area {
      border: 2px dashed var(--primary);
      border-radius: var(--radius);
      padding: 25px;
      cursor: pointer;
      transition: 0.3s;
    }

    .upload-area:hover {
      background-color: rgba(0, 123, 255, 0.05);
    }

    input[type="file"] {
      display: none;
    }

    iframe {
      width: 100%;
      height: 300px;
      margin-top: 20px;
      border-radius: var(--radius);
      display: none;
    }

    .controls {
      margin-top: 20px;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
    }

    select, button, input[type="password"] {
      padding: 10px 15px;
      border-radius: var(--radius);
      border: 1px solid var(--primary);
      font-size: 14px;
      cursor: pointer;
      transition: 0.3s;
    }

    select {
      background: #fff;
      color: var(--text);
    }

    button {
      background: var(--primary);
      color: white;
      border: none;
    }

    button:hover {
      background: #0056b3;
    }

    input[type="password"] {
      width: 200px;
    }

    @media (max-width: 600px) {
      .controls {
        flex-direction: column;
      }
      select, button, input[type="password"] {
        width: 100%;
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h2>ðŸ”’ PDF Lock / Unlock Tool</h2>

    <label for="pdfInput" class="upload-area">
      <p>ðŸ“¤ Click or drag a PDF file to upload</p>
    </label>
    <input type="file" id="pdfInput" accept=".pdf" />

    <iframe id="pdfPreview"></iframe>

    <div class="controls" id="controls" style="display:none;">
      <select id="actionSelect">
        <option value="lock">Lock PDF</option>
        <option value="unlock">Unlock PDF</option>
      </select>
      <input type="password" id="passwordInput" placeholder="Enter password" />
      <select id="formatSelect">
        <option value="pdf">Export as PDF</option>
        <option value="docx">Export as DOCX</option>
        <option value="txt">Export as TXT</option>
      </select>
      <button id="processBtn">Apply</button>
      <button id="downloadBtn" style="display:none;">Download</button>
    </div>
  </div>

  <script>
    const pdfInput = document.getElementById('pdfInput');
    const pdfPreview = document.getElementById('pdfPreview');
    const controls = document.getElementById('controls');
    const actionSelect = document.getElementById('actionSelect');
    const passwordInput = document.getElementById('passwordInput');
    const formatSelect = document.getElementById('formatSelect');
    const processBtn = document.getElementById('processBtn');
    const downloadBtn = document.getElementById('downloadBtn');

    let currentFile = null;
    let processedBlob = null;

    pdfInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (!file) return;

      currentFile = file;
      const reader = new FileReader();
      reader.onload = () => {
        pdfPreview.src = reader.result;
        pdfPreview.style.display = 'block';
        controls.style.display = 'flex';
        downloadBtn.style.display = 'none';
      };
      reader.readAsDataURL(file);
    });

    processBtn.addEventListener('click', () => {
      if (!currentFile) return alert('Please upload a PDF first.');

      const action = actionSelect.value;
      const password = passwordInput.value.trim();
      const selectedFormat = formatSelect.value;

      if (action === 'lock' && !password) return alert('Enter a password to lock the PDF.');
      if (action === 'unlock' && !password) return alert('Enter the PDF password to unlock.');

      // Simulated processing (mock)
      const resultText = `${action === 'lock' ? 'Locked' : 'Unlocked'} ${currentFile.name} with password: ${password}`;
      let mimeType = 'application/pdf';
      if (selectedFormat === 'docx') mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
      if (selectedFormat === 'txt') mimeType = 'text/plain';

      processedBlob = new Blob([resultText], { type: mimeType });

      alert(`PDF successfully ${action === 'lock' ? 'locked ðŸ”’' : 'unlocked ðŸ”“'}!`);
      pdfPreview.src = URL.createObjectURL(processedBlob);
      pdfPreview.style.display = 'block';
      downloadBtn.style.display = 'inline-block';
    });

    downloadBtn.addEventListener('click', () => {
      if (!processedBlob) return;
      const link = document.createElement('a');
      const ext = formatSelect.value;
      link.download = `${actionSelect.value}-pdf.${ext}`;
      link.href = URL.createObjectURL(processedBlob);
      link.click();
    });
  </script>
</body>
</html>
